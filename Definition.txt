
* Props - это некоторые вргументы / параметры, которые компонент может принимать из вне,
но обмен этими props идет всегда сверху вниз. Т.е. от родителя к компоненту.

** <App /> post = [] => props => post = {title, body} <PostForm /> **

* localeCompare - возвращает число, указывающее, должна ли данная строка находиться до, после или в том же самом месте, что и строка, переданная через параметр, при сортировке этих строк.

* useMemo - вызывает функцию при изменении зависимостей и memoizes (запоминает) результат функции между рендерами. useMemo(callback, deps)

callback должен возврощать результат каких-то вычислений, например 

useMemo(() => {
	return [...props].sort(...)
}, deps) 
Вместо deps можно передавать какие-то переменные, поля объекта.

* stopPropagation - запрещает передачу события от ребенка к родителю, то есть, если мы кликнули по вложенному диву, его родитель "не почувствует" этого нажатия.

e(event).stopPropagation()

* useEffect - позволяет управлять различными сопутствующими действиями в функциональном компоненте или то, что называется "side effects" (побочные эффекты), например, извлечение данных, ручное изменение структуры DOM, использование таймеров, логгирование и т. д.

Монтирование(mount) => Обновление(update) => Размонтирование(unmount)

useEffect(callback, deps)

useEffect(() => {
	fetchPosts()
}, [filter])

* Декомпозиция — разделение целого на части.

* textContent – это свойство, которое предназначено для работы с текстовым контентом элемента. Оно позволяет его как получить (включая текстовое содержимое всего его потомков), так и установить.

* createContext(defaultValue); Создаёт объект Context . Когда React рендерит компонент, который подписан на этот объект, React получит текущее значение контекста из ближайшего подходящего Provider выше в дереве компонентов.

* useRef - возвращает изменяемый ref-объект, свойство .current которого инициализируется переданным аргументом (initialValue). Возвращённый объект будет сохраняться в течение всего времени жизни компонента.